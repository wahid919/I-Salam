<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;
use Yii;
use app\models\Setting;
    use app\models\search\SettingSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use app\models\Action;
use yii\web\UploadedFile;

/**
* SettingController implements the CRUD actions for Setting model.
*/
class SettingController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;
public function behaviors()
{
//NodeLogger::sendLog(Action::getAccess($this->id));
//apply role_action table for privilege (doesn't apply to super admin)
return Action::getAccess($this->id);
}

/**
* Lists all Setting models.
* @return mixed
*/
public function actionIndex()
{
$model = Setting::find()->all();
$searchModel  = new SettingSearch;
$dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

if($model == null){
return $this->render('index', [
'dataProvider' => $dataProvider,
'searchModel' => $searchModel,
]);
}else{
return $this->redirect(['view', 'id' => $model[0]["id"]]);
}
}

/**
* Displays a single Setting model.
* @param integer $id
*
* @return mixed
*/
public function actionView($id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

return $this->render('view', [
'model' => $this->findModel($id),
]);
}

/**
* Creates a new Setting model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
{
$model = new Setting;

try {
if ($model->load($_POST)) {
    $logos = UploadedFile::getInstance($model, 'logo');
        if($logos !=NULL){
                    # store the source logos name
                    $model->logo = $logos->name;
                    $arr = explode(".", $logos->name);
                    $extension = end($arr);
    
                    # generate a unique logos name
                    $model->logo = Yii::$app->security->generateRandomString() . ".{$extension}";
    
                    # the path to save logos
                    // unlink(Yii::getAlias("@app/web/uploads/pengajuan/") . $oldFile);
                    if(file_exists(Yii::getAlias("@app/web/uploads/setting/")) == false){
                        mkdir(Yii::getAlias("@app/web/uploads/setting/"), 0777, true);
                    }
                    $path = Yii::getAlias("@app/web/uploads/setting/") . $model->logo;
        $logos->saveAs($path);
                }
                
    $bg_logins = UploadedFile::getInstance($model, 'bg_login');
    if($bg_logins !=NULL){
                # store the source bg_logins name
                $model->bg_login = $bg_logins->name;
                $arr = explode(".", $bg_logins->name);
                $extension = end($arr);

                # generate a unique bg_logins name
                $model->bg_login = Yii::$app->security->generateRandomString() . ".{$extension}";

                # the path to save bg_logins
                // unlink(Yii::getAlias("@app/web/uploads/pengajuan/") . $oldFile);
                if(file_exists(Yii::getAlias("@app/web/uploads/setting/")) == false){
                    mkdir(Yii::getAlias("@app/web/uploads/setting/"), 0777, true);
                }
                $path = Yii::getAlias("@app/web/uploads/setting/") . $model->bg_login;
    $bg_logins->saveAs($path);
            }
            
    $bg_pins = UploadedFile::getInstance($model, 'bg_pin');
    if($bg_pins !=NULL){
                # store the source bg_pins name
                $model->bg_pin = $bg_pins->name;
                $arr = explode(".", $bg_pins->name);
                $extension = end($arr);

                # generate a unique bg_pins name
                $model->bg_pin = Yii::$app->security->generateRandomString() . ".{$extension}";

                # the path to save bg_pins
                // unlink(Yii::getAlias("@app/web/uploads/pengajuan/") . $oldFile);
                if(file_exists(Yii::getAlias("@app/web/uploads/setting/")) == false){
                    mkdir(Yii::getAlias("@app/web/uploads/setting/"), 0777, true);
                }
                $path = Yii::getAlias("@app/web/uploads/setting/") . $model->bg_pin;
    $bg_pins->saveAs($path);
            }
    if($model->save()){
    return $this->redirect(['view', 'id' => $model->id]);
    }
} elseif (!\Yii::$app->request->isPost) {
$model->load($_GET);
}
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
$model->addError('_exception', $msg);
}
return $this->render('create', ['model' => $model]);
}

/**
* Updates an existing Setting model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($id)
{
$model = $this->findModel($id);

if ($model->load($_POST) && $model->save()) {
return $this->redirect(Url::previous());
} else {
return $this->render('update', [
'model' => $model,
]);
}
}

/**
* Deletes an existing Setting model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
$this->findModel($id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the Setting model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return Setting the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = Setting::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
